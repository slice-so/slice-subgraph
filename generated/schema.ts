// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save OwnershipTransferred entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OwnershipTransferred entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OwnershipTransferred", id.toString(), this);
  }

  static load(id: string): OwnershipTransferred | null {
    return store.get("OwnershipTransferred", id) as OwnershipTransferred | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    return value.toBytes();
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class Paused extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Paused entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Paused entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Paused", id.toString(), this);
  }

  static load(id: string): Paused | null {
    return store.get("Paused", id) as Paused | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }
}

export class ProductsPaid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ProductsPaid entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ProductsPaid entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ProductsPaid", id.toString(), this);
  }

  static load(id: string): ProductsPaid | null {
    return store.get("ProductsPaid", id) as ProductsPaid | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get slicerAddresses(): Array<Bytes> {
    let value = this.get("slicerAddresses");
    return value.toBytesArray();
  }

  set slicerAddresses(value: Array<Bytes>) {
    this.set("slicerAddresses", Value.fromBytesArray(value));
  }

  get productIds(): Array<BigInt> {
    let value = this.get("productIds");
    return value.toBigIntArray();
  }

  set productIds(value: Array<BigInt>) {
    this.set("productIds", Value.fromBigIntArray(value));
  }

  get quantities(): Array<BigInt> {
    let value = this.get("quantities");
    return value.toBigIntArray();
  }

  set quantities(value: Array<BigInt>) {
    this.set("quantities", Value.fromBigIntArray(value));
  }

  get totalPaid(): BigInt {
    let value = this.get("totalPaid");
    return value.toBigInt();
  }

  set totalPaid(value: BigInt) {
    this.set("totalPaid", Value.fromBigInt(value));
  }
}

export class TokenSliced extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenSliced entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenSliced entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenSliced", id.toString(), this);
  }

  static load(id: string): TokenSliced | null {
    return store.get("TokenSliced", id) as TokenSliced | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get slicerAddress(): Bytes {
    let value = this.get("slicerAddress");
    return value.toBytes();
  }

  set slicerAddress(value: Bytes) {
    this.set("slicerAddress", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get payees(): Array<Bytes> {
    let value = this.get("payees");
    return value.toBytesArray();
  }

  set payees(value: Array<Bytes>) {
    this.set("payees", Value.fromBytesArray(value));
  }

  get shares(): Array<BigInt> {
    let value = this.get("shares");
    return value.toBigIntArray();
  }

  set shares(value: Array<BigInt>) {
    this.set("shares", Value.fromBigIntArray(value));
  }
}

export class TriggeredRelease extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TriggeredRelease entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TriggeredRelease entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TriggeredRelease", id.toString(), this);
  }

  static load(id: string): TriggeredRelease | null {
    return store.get("TriggeredRelease", id) as TriggeredRelease | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get totalReleased(): BigInt {
    let value = this.get("totalReleased");
    return value.toBigInt();
  }

  set totalReleased(value: BigInt) {
    this.set("totalReleased", Value.fromBigInt(value));
  }

  get slicerPercentage(): i32 {
    let value = this.get("slicerPercentage");
    return value.toI32();
  }

  set slicerPercentage(value: i32) {
    this.set("slicerPercentage", Value.fromI32(value));
  }
}

export class Unpaused extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Unpaused entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Unpaused entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Unpaused", id.toString(), this);
  }

  static load(id: string): Unpaused | null {
    return store.get("Unpaused", id) as Unpaused | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }
}
