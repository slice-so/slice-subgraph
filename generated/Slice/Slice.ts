// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ProductsPaid extends ethereum.Event {
  get params(): ProductsPaid__Params {
    return new ProductsPaid__Params(this);
  }
}

export class ProductsPaid__Params {
  _event: ProductsPaid;

  constructor(event: ProductsPaid) {
    this._event = event;
  }

  get slicerAddresses(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }

  get productIds(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get quantities(): Array<i32> {
    return this._event.parameters[2].value.toI32Array();
  }

  get totalPaid(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TokenSliced extends ethereum.Event {
  get params(): TokenSliced__Params {
    return new TokenSliced__Params(this);
  }
}

export class TokenSliced__Params {
  _event: TokenSliced;

  constructor(event: TokenSliced) {
    this._event = event;
  }

  get slicerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get payees(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get shares(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get minimumShares(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get isCollectible(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }
}

export class TriggeredRelease extends ethereum.Event {
  get params(): TriggeredRelease__Params {
    return new TriggeredRelease__Params(this);
  }
}

export class TriggeredRelease__Params {
  _event: TriggeredRelease;

  constructor(event: TriggeredRelease) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get totalReleased(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get slicerPercentage(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Slice extends ethereum.SmartContract {
  static bind(address: Address): Slice {
    return new Slice("Slice", address);
  }

  _createSlicer(
    id: BigInt,
    minimumShares: BigInt,
    isCollectible: boolean
  ): Address {
    let result = super.call(
      "_createSlicer",
      "_createSlicer(uint256,uint256,bool):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(minimumShares),
        ethereum.Value.fromBoolean(isCollectible)
      ]
    );

    return result[0].toAddress();
  }

  try__createSlicer(
    id: BigInt,
    minimumShares: BigInt,
    isCollectible: boolean
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_createSlicer",
      "_createSlicer(uint256,uint256,bool):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(minimumShares),
        ethereum.Value.fromBoolean(isCollectible)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _implementation(): Address {
    let result = super.call(
      "_implementation",
      "_implementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_implementation",
      "_implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getEthUsd(): BigInt {
    let result = super.call("getEthUsd", "getEthUsd():(int256)", []);

    return result[0].toBigInt();
  }

  try_getEthUsd(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getEthUsd", "getEthUsd():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  slicers(id: BigInt): Address {
    let result = super.call("slicers", "slicers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toAddress();
  }

  try_slicers(id: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("slicers", "slicers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalTokens(): BigInt {
    let result = super.call("totalTokens", "totalTokens():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalTokens", "totalTokens():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unreleasedBatch(
    account: Address,
    slicerAddresses: Array<Address>
  ): Array<BigInt> {
    let result = super.call(
      "unreleasedBatch",
      "unreleasedBatch(address,address[]):(uint256[])",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddressArray(slicerAddresses)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_unreleasedBatch(
    account: Address,
    slicerAddresses: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "unreleasedBatch",
      "unreleasedBatch(address,address[]):(uint256[])",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddressArray(slicerAddresses)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }
}

export class _addToSliceCategoryCall extends ethereum.Call {
  get inputs(): _addToSliceCategoryCall__Inputs {
    return new _addToSliceCategoryCall__Inputs(this);
  }

  get outputs(): _addToSliceCategoryCall__Outputs {
    return new _addToSliceCategoryCall__Outputs(this);
  }
}

export class _addToSliceCategoryCall__Inputs {
  _call: _addToSliceCategoryCall;

  constructor(call: _addToSliceCategoryCall) {
    this._call = call;
  }

  get categoryIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _addToSliceCategoryCall__Outputs {
  _call: _addToSliceCategoryCall;

  constructor(call: _addToSliceCategoryCall) {
    this._call = call;
  }
}

export class _beforeTransferCall extends ethereum.Call {
  get inputs(): _beforeTransferCall__Inputs {
    return new _beforeTransferCall__Inputs(this);
  }

  get outputs(): _beforeTransferCall__Outputs {
    return new _beforeTransferCall__Outputs(this);
  }
}

export class _beforeTransferCall__Inputs {
  _call: _beforeTransferCall;

  constructor(call: _beforeTransferCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get slicerAddresses(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class _beforeTransferCall__Outputs {
  _call: _beforeTransferCall;

  constructor(call: _beforeTransferCall) {
    this._call = call;
  }
}

export class _createSlicerCall extends ethereum.Call {
  get inputs(): _createSlicerCall__Inputs {
    return new _createSlicerCall__Inputs(this);
  }

  get outputs(): _createSlicerCall__Outputs {
    return new _createSlicerCall__Outputs(this);
  }
}

export class _createSlicerCall__Inputs {
  _call: _createSlicerCall;

  constructor(call: _createSlicerCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minimumShares(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get isCollectible(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class _createSlicerCall__Outputs {
  _call: _createSlicerCall;

  constructor(call: _createSlicerCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class _setMaximumBatchCall extends ethereum.Call {
  get inputs(): _setMaximumBatchCall__Inputs {
    return new _setMaximumBatchCall__Inputs(this);
  }

  get outputs(): _setMaximumBatchCall__Outputs {
    return new _setMaximumBatchCall__Outputs(this);
  }
}

export class _setMaximumBatchCall__Inputs {
  _call: _setMaximumBatchCall;

  constructor(call: _setMaximumBatchCall) {
    this._call = call;
  }

  get newValueSlice(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get newValueRelease(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class _setMaximumBatchCall__Outputs {
  _call: _setMaximumBatchCall;

  constructor(call: _setMaximumBatchCall) {
    this._call = call;
  }
}

export class _togglePauseCall extends ethereum.Call {
  get inputs(): _togglePauseCall__Inputs {
    return new _togglePauseCall__Inputs(this);
  }

  get outputs(): _togglePauseCall__Outputs {
    return new _togglePauseCall__Outputs(this);
  }
}

export class _togglePauseCall__Inputs {
  _call: _togglePauseCall;

  constructor(call: _togglePauseCall) {
    this._call = call;
  }
}

export class _togglePauseCall__Outputs {
  _call: _togglePauseCall;

  constructor(call: _togglePauseCall) {
    this._call = call;
  }
}

export class _upgradeSlicersCall extends ethereum.Call {
  get inputs(): _upgradeSlicersCall__Inputs {
    return new _upgradeSlicersCall__Inputs(this);
  }

  get outputs(): _upgradeSlicersCall__Outputs {
    return new _upgradeSlicersCall__Outputs(this);
  }
}

export class _upgradeSlicersCall__Inputs {
  _call: _upgradeSlicersCall;

  constructor(call: _upgradeSlicersCall) {
    this._call = call;
  }

  get newLogicImpl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _upgradeSlicersCall__Outputs {
  _call: _upgradeSlicersCall;

  constructor(call: _upgradeSlicersCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get SLCAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get sliceCoreAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PayProductsCall extends ethereum.Call {
  get inputs(): PayProductsCall__Inputs {
    return new PayProductsCall__Inputs(this);
  }

  get outputs(): PayProductsCall__Outputs {
    return new PayProductsCall__Outputs(this);
  }
}

export class PayProductsCall__Inputs {
  _call: PayProductsCall;

  constructor(call: PayProductsCall) {
    this._call = call;
  }

  get slicerAddresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get productIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get quantities(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }
}

export class PayProductsCall__Outputs {
  _call: PayProductsCall;

  constructor(call: PayProductsCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SliceCall extends ethereum.Call {
  get inputs(): SliceCall__Inputs {
    return new SliceCall__Inputs(this);
  }

  get outputs(): SliceCall__Outputs {
    return new SliceCall__Outputs(this);
  }
}

export class SliceCall__Inputs {
  _call: SliceCall;

  constructor(call: SliceCall) {
    this._call = call;
  }

  get accounts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get shares(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get minimumShares(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get isCollectible(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class SliceCall__Outputs {
  _call: SliceCall;

  constructor(call: SliceCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TriggerReleaseCall extends ethereum.Call {
  get inputs(): TriggerReleaseCall__Inputs {
    return new TriggerReleaseCall__Inputs(this);
  }

  get outputs(): TriggerReleaseCall__Outputs {
    return new TriggerReleaseCall__Outputs(this);
  }
}

export class TriggerReleaseCall__Inputs {
  _call: TriggerReleaseCall;

  constructor(call: TriggerReleaseCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get slicerAddresses(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get slicerPercentage(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class TriggerReleaseCall__Outputs {
  _call: TriggerReleaseCall;

  constructor(call: TriggerReleaseCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
