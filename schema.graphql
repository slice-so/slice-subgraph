type Slicer @entity {
  id: ID!
  address: Bytes!
  slices: BigInt!
  minimumSlices: BigInt!
  totalReceived: BigInt!
  isCollectible: Boolean!
  creator: Payee!
  payees: [PayeeSlicer]! @derivedFrom(field: "slicer")
  products: [Product]! @derivedFrom(field: "slicer")
  childrenSlicers: [Slicer!] # Check!
  createdAtTimestamp: BigInt!
  # contentURI: String!
  # metadataURI: String!
}

type Payee @entity {
  id: ID!
  slc: BigInt
  slicers: [PayeeSlicer]! @derivedFrom(field: "payee")
  created: [Slicer]! @derivedFrom(field: "creator")
}

type PayeeSlicer @entity {
  id: ID!
  payee: Payee!
  slicer: Slicer!
  slices: BigInt!
  released: BigInt
  purchases: [ProductPurchase]! @derivedFrom(field: "buyer")
}

type Product @entity {
  id: ID!
  slicer: Slicer!
  categoryIndex: BigInt!
  price: BigInt!
  isUSD: Boolean!
  isInfinite: Boolean!
  isMultiple: Boolean!
  availableUnits: BigInt!
  creator: Bytes!
  data: Bytes!
  subProducts: [Product]!
  purchases: [ProductPurchase]! @derivedFrom(field: "product")
}

type ProductPurchase @entity {
  id: ID!
  product: Product!
  buyer: PayeeSlicer!
  hash: [Bytes!]!
  quantity: BigInt!
}
