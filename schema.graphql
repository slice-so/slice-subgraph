type Slicer @entity {
  id: ID!
  slicerVersion: BigInt!
  address: Bytes!
  slices: BigInt!
  minimumSlices: BigInt!
  createdAtTimestamp: BigInt!
  releaseTimelock: BigInt!
  transferableTimelock: BigInt!
  isImmutable: Boolean!
  protocolFee: BigInt!
  royaltyPercentage: BigInt!
  royaltyReceiver: Payee!
  creator: Payee!
  controller: Payee!
  ethReceived: BigInt!
  productsModuleBalance: BigInt!
  productsModuleReleased: BigInt!
  childrenSlicers: [Slicer!]!
  currencies: [CurrencySlicer!]! @derivedFrom(field: "slicer")
  payees: [PayeeSlicer!]! @derivedFrom(field: "slicer")
  products: [Product!]! @derivedFrom(field: "slicer")
  TokenListings: [TokenListing!]! @derivedFrom(field: "slicer")
  # TokensReceived: [TokenReceived!]! @derivedFrom(field: "slicer")
}

type Payee @entity {
  id: ID!
  created: [Slicer!]! @derivedFrom(field: "creator")
  controlled: [Slicer!]! @derivedFrom(field: "controller")
  royaltyReceived: [Slicer!]! @derivedFrom(field: "royaltyReceiver")
  slicers: [PayeeSlicer!]! @derivedFrom(field: "payee")
  currencies: [PayeeCurrency!]! @derivedFrom(field: "payee")
  purchases: [ProductPurchase!]! @derivedFrom(field: "buyer")
}

type Currency @entity {
  id: ID!
  slicers: [CurrencySlicer!]! @derivedFrom(field: "currency")
  payees: [PayeeCurrency!]! @derivedFrom(field: "currency")
  products: [ProductPrices!]! @derivedFrom(field: "currency")
}

type Product @entity {
  id: ID!
  slicer: Slicer!
  categoryIndex: BigInt!
  isRemoved: Boolean!
  isFree: Boolean!
  isMultiple: Boolean!
  isInfinite: Boolean!
  availableUnits: BigInt!
  creator: Bytes!
  data: Bytes!
  createdAtTimestamp: BigInt!
  extAddress: Bytes!
  extValue: BigInt!
  extCheckSig: Bytes!
  extExecSig: Bytes!
  extData: Bytes!
  totalPurchases: BigInt!
  subProducts: [Product!]!
  prices: [ProductPrices!]! @derivedFrom(field: "product")
  purchases: [ProductPurchase!]! @derivedFrom(field: "product")
}

type PayeeSlicer @entity {
  id: ID!
  payee: Payee!
  slicer: Slicer!
  slices: BigInt!
  ethSent: BigInt!
  currencyPayments: [PayeeSlicerCurrency!]! @derivedFrom(field: "payeeSlicer")
  purchases: [ProductPurchase!]! @derivedFrom(field: "buyerSlicer")
}

type PayeeCurrency @entity {
  id: ID!
  payee: Payee!
  currency: Currency!
  toWithdraw: BigInt!
  toPayToProtocol: BigInt!
  withdrawn: BigInt!
  paidToProtocol: BigInt!
  slicerPayments: [PayeeSlicerCurrency!]! @derivedFrom(field: "payeeCurrency")
}

type CurrencySlicer @entity {
  id: ID!
  currency: Currency!
  slicer: Slicer!
  released: BigInt!
  releasedToProtocol: BigInt!
  payeePayments: [PayeeSlicerCurrency!]! @derivedFrom(field: "currencySlicer")
  purchases: [ProductPurchase!]! @derivedFrom(field: "currencySlicer")
}

type PayeeSlicerCurrency @entity {
  id: ID!
  payeeSlicer: PayeeSlicer!
  payeeCurrency: PayeeCurrency!
  currencySlicer: CurrencySlicer!
  paidForProducts: BigInt!
}

type ProductPrices @entity {
  id: ID!
  product: Product!
  currency: Currency!
  price: BigInt!
  dynamicPricing: Boolean!
}

type ProductPurchase @entity {
  id: ID!
  product: Product!
  buyerSlicer: PayeeSlicer!
  currencySlicer: CurrencySlicer!
  buyer: Payee!
  quantity: BigInt!
  paymentEth: BigInt!
  paymentCurrency: BigInt!
  lastPurchasedAtTimestamp: BigInt!
}

# type TokenReceived @entity {
#   id: ID!
#   slicer: Slicer!
#   contract: Bytes!
#   tokenId: BigInt!
#   quantity: BigInt!
#   isERC721: Boolean!
#   lastReceivedAtTimestamp: BigInt!
# }

type TokenListing @entity {
  id: ID!
  slicer: Slicer!
  contract: Bytes!
  tokenId: BigInt!
  isERC721: Boolean!
  quantity: BigInt!
  lastEditedAtTimestamp: BigInt!
}
