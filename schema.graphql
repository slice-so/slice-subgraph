type OwnershipTransferred @entity {
  id: ID!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
}

type Paused @entity {
  id: ID!
  account: Bytes! # address
}

type ProductsPaid @entity {
  id: ID!
  slicerAddresses: [Bytes!]! # address[]
  productIds: [BigInt!]! # uint256[]
  quantities: [BigInt!]! # uint256[]
  totalPaid: BigInt! # uint256
}

type TokenSliced @entity {
  id: ID!
  slicerAddress: Bytes! # address
  tokenId: BigInt! # uint256
  payees: [Bytes!]! # address[]
  shares: [BigInt!]! # uint256[]
}

type TriggeredRelease @entity {
  id: ID!
  account: Bytes! # address
  totalReleased: BigInt! # uint256
  slicerPercentage: Int! # uint8
}

type Unpaused @entity {
  id: ID!
  account: Bytes! # address
}
